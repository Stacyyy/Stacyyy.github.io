<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stacy&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-13T00:31:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Stacy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BFC</title>
    <link href="http://yoursite.com/2016/04/08/BFC/"/>
    <id>http://yoursite.com/2016/04/08/BFC/</id>
    <published>2016-04-08T06:07:01.000Z</published>
    <updated>2016-04-13T00:31:30.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是-BFC&quot;&gt;&lt;a href=&quot;#什么是-BFC&quot; class=&quot;headerlink&quot; title=&quot;什么是 BFC&quot;&gt;&lt;/a&gt;什么是 BFC&lt;/h2&gt;&lt;p&gt;BFC（block formattting context），块级格式化上下文，我们在 CSS 中的许多行为都会创建新的 BFC ，到底什么是 BFC 呢？它提供了一个独立布局的环境，理解为一个盒子（块级元素），这个盒子里的一切布局不受外界影响(我们可以利用这个特性来消除浮动元素或者对其非浮动的兄弟元素和其子元素带来的影响)，但盒子内部的布局存在相互影响。本文将从“何时产生新的 BFC ”以及“如何应用 BFC 实现我们想要的样式效果”两个方面展开。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么情况下产生-BFC&quot;&gt;&lt;a href=&quot;#什么情况下产生-BFC&quot; class=&quot;headerlink&quot; title=&quot;什么情况下产生 BFC&quot;&gt;&lt;/a&gt;什么情况下产生 BFC&lt;/h2&gt;&lt;p&gt;当 CSS 中设置里以下属性中的一种或多种时，都会创建新的BFC。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float：left | right； //not none
position: absolute | fixed;
display: table-cell | table-caption | flex | inline-flex | inline-block;
overflow: hidden | scroll | auto; //not visible
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 BFC 中，对于从左到右的格式，每一个盒子的 margin-left 都会碰到容器的 border-left ，除了盒子里创建里一个 BFC 。&lt;/p&gt;
&lt;h2 id=&quot;应用-BFC&quot;&gt;&lt;a href=&quot;#应用-BFC&quot; class=&quot;headerlink&quot; title=&quot;应用 BFC&quot;&gt;&lt;/a&gt;应用 BFC&lt;/h2&gt;&lt;h3 id=&quot;消除-Collapsing-Margin&quot;&gt;&lt;a href=&quot;#消除-Collapsing-Margin&quot; class=&quot;headerlink&quot; title=&quot;消除 Collapsing Margin&quot;&gt;&lt;/a&gt;消除 Collapsing Margin&lt;/h3&gt;&lt;p&gt;我们知道，在 CSS 中，相邻的两个块级元素的外边距会出现重叠，从而形成一个重叠的外边距。这里的相邻也就时必须满足以下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处于同一个 BFC 中的正常文档流中的块级元素；&lt;/li&gt;
&lt;li&gt;元素之间不存在间隙&lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#clearance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;（clearance）&lt;/a&gt;，并且没有 padding 和 border 将它们分开:&lt;br&gt;根据 W3C 规范，浮动元素之后的元素设置 clear&lt;br&gt; 闭合相关浮动时，闭合浮动的元素会在其 margin-top 上形成一定的空隙，也就是我们这里所说的     clearance （通常情况下我们不需要计算出来，具体计算可以参考上文中 clearance 的定义链接），这个间距会阻止 margin-top 的叠加。&lt;br&gt; &lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;KzQrYB&quot; data-default-tab=&quot;result&quot; data-user=&quot;Stacyyy&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Stacyyy/pen/KzQrYB/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clearance&lt;/a&gt; by stacyyy (&lt;a href=&quot;http://codepen.io/Stacyyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Stacyyy&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;br&gt; &lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;br&gt;从上面的例子中，我们可以看到，上下两个块级元素的间距只有上面的块计元素的 margin-bottom 决定，显示为 20px ，而闭和浮动元素的 margin-top 值 100px 并未和 浮动元素的 margin-bottom 进行叠加，而是紧贴着它的 margin-bottom。&lt;br&gt;我们可以看到，第一个盒子和第二个盒子的外边距并未发生重叠，可以得出结论，闭合浮动不能使浮动元素回到原来的 BFC 。            &lt;/li&gt;
&lt;li&gt;都属于垂直方向上的相邻外边距（父子元素、兄弟元素、元素自身）:&lt;ul&gt;
&lt;li&gt;元素的 margin-top 和第一个常规文档流的子元素的 margin-top；&lt;br&gt;&lt;br&gt;  &lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;dMdKEr&quot; data-default-tab=&quot;result&quot; data-user=&quot;Stacyyy&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Stacyyy/pen/dMdKEr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;collasping1&lt;/a&gt; by stacyyy (&lt;a href=&quot;http://codepen.io/Stacyyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Stacyyy&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;  &lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;height 值为 auto 的元素的 margin-bottom 和 最后一个常规文档流的子元素的 margin-bottom；&lt;br&gt;&lt;br&gt; &lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;RaQBoP&quot; data-default-tab=&quot;result&quot; data-user=&quot;Stacyyy&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Stacyyy/pen/RaQBoP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;collasping2&lt;/a&gt; by stacyyy (&lt;a href=&quot;http://codepen.io/Stacyyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Stacyyy&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt; &lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;元素的 margin-bottom 和下一个常规文档流的兄弟元素的 margin-top；&lt;br&gt;&lt;/li&gt;
&lt;li&gt;height 为0并且 min-height 也为0，不包含常规文档流的子元素并且自身没有建立新的 BFC 的元素的 margin-top 和 margin-bottom；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;这里提一下外边距的重叠计算规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当相邻块级元素的外边距都为正数时，重叠外边距取更大者的值；     &lt;/li&gt;
&lt;li&gt;当相邻块级元素的外边距都为负数时，重叠外边距取两者绝对值更大者的值；      &lt;/li&gt;
&lt;li&gt;当相邻块级元素的外边距一个为正，一个为负时，重叠外边距取两者相加后的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;包含浮动元素&quot;&gt;&lt;a href=&quot;#包含浮动元素&quot; class=&quot;headerlink&quot; title=&quot;包含浮动元素&quot;&gt;&lt;/a&gt;包含浮动元素&lt;/h3&gt;&lt;p&gt;对于一个没有高度或高度为 auto 的父容器，如果子元素是浮动元素，脱离了文档流，则父容器无法包含子元素，我们可以利用 BFC 来包含浮动元素。&lt;br&gt;    &lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;VaQqrW&quot; data-default-tab=&quot;result&quot; data-user=&quot;Stacyyy&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Stacyyy/pen/VaQqrW/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;show_height&lt;/a&gt; by stacyyy (&lt;a href=&quot;http://codepen.io/Stacyyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Stacyyy&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;    &lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So easy! My mom wouldn’t be worried about my floats any more.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对 BFC 了解到这里，我们就能理解很多意料之外出现的布局效果了。 BFC 还可以应用于“避免文字环绕浮动元素”等，为它创造一个 BFC 即可！这里就不需要给出示例了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#block-formatting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.w3.org/TR/CSS2/visuren.html#block-formatting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#clearance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.w3.org/TR/CSS2/visuren.html#clearance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sitepoint.com/understanding-block-formatting-contexts-in-css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sitepoint.com/understanding-block-formatting-contexts-in-css/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-BFC&quot;&gt;&lt;a href=&quot;#什么是-BFC&quot; class=&quot;headerlink&quot; title=&quot;什么是 BFC&quot;&gt;&lt;/a&gt;什么是 BFC&lt;/h2&gt;&lt;p&gt;BFC（block formattting context），块级格式化上下文，我们在 CSS 中的许多行为都会创建新的 BFC ，到底什么是 BFC 呢？它提供了一个独立布局的环境，理解为一个盒子（块级元素），这个盒子里的一切布局不受外界影响(我们可以利用这个特性来消除浮动元素或者对其非浮动的兄弟元素和其子元素带来的影响)，但盒子内部的布局存在相互影响。本文将从“何时产生新的 BFC ”以及“如何应用 BFC 实现我们想要的样式效果”两个方面展开。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="BFC collasping_margin" scheme="http://yoursite.com/tags/BFC-collasping-margin/"/>
    
  </entry>
  
  <entry>
    <title>响应式布局</title>
    <link href="http://yoursite.com/2016/03/28/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2016/03/28/响应式布局/</id>
    <published>2016-03-28T04:48:40.000Z</published>
    <updated>2016-04-13T00:30:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;响应式布局&quot;&gt;&lt;a href=&quot;#响应式布局&quot; class=&quot;headerlink&quot; title=&quot;响应式布局&quot;&gt;&lt;/a&gt;响应式布局&lt;/h2&gt;&lt;p&gt;（写栅格式布局时接触到的一些关于响应式布局的知识，以及运用SCSS对代码进行优化。）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&amp;nbsp;响应式布局可以根据视口大小改变网页布局。三要素：媒体查询、流式设计，弹性图片。&lt;/p&gt;
&lt;h2 id=&quot;媒体查询&quot;&gt;&lt;a href=&quot;#媒体查询&quot; class=&quot;headerlink&quot; title=&quot;媒体查询&quot;&gt;&lt;/a&gt;媒体查询&lt;/h2&gt;&lt;p&gt;使用&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;媒体查询&lt;/a&gt;可以在不改变页面内容的情况下，为一些特定的输出设备定制显示效果。使用格式：由媒体类型和n个检测媒体特性的表达式组成（n&amp;gt;=0），各检测属性之间由 and/or/not 连接，并用括号括起来。可以用媒体查询的媒体特性有 width，device-width，height，color，color-index，aspect-ratio，grid，orientation，resolution，scan 等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@media screen and (min-width: 768px){width: 60%;}
@media screen and (max-width: 768px){width: 80%;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个简单的示范，事实上我们可以用 @media 实现更复杂的变化，使我们的页面能在不同大小的视口中能按我们设想的效果一样显示出来。&lt;/p&gt;
&lt;p&gt;当然这也意味着我们需要考虑很多很多种情况。而且就算这样，我们也不能认为响应式布局能能完全解决不同设备或不同视窗下网页显示不同的问题。如果只是展示用的页面，响应式网页设计能考虑不同的用户的视觉体验，使我们的页面不管在什么情况下都很美观，但对于功能复杂的有众多数据流动的页面，我们不能简单认为用 &lt;code&gt;@media (max-width: 400px;){width: 30%;}&lt;/code&gt; 能解决客户端显示的所有问题，这里不仅仅是样式问题，更有逻辑结构等不兼容。所以在必要的时候，工程师们还是会选择为不同的设备写不同版本的代码。&lt;/p&gt;
&lt;h2 id=&quot;流式设计&quot;&gt;&lt;a href=&quot;#流式设计&quot; class=&quot;headerlink&quot; title=&quot;流式设计&quot;&gt;&lt;/a&gt;流式设计&lt;/h2&gt;&lt;p&gt;我们用 float 实现块级元素的流动式设计，让我们的布局中的块级元素在不同大小的视口中视具体空间按不同位置排列，而不是简单地缩小或放大 block 的宽高。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@media screen and (min-width: 768px){
[class*=&amp;quot;col-&amp;quot;]{float: left;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;弹性图片&quot;&gt;&lt;a href=&quot;#弹性图片&quot; class=&quot;headerlink&quot; title=&quot;弹性图片&quot;&gt;&lt;/a&gt;弹性图片&lt;/h2&gt;&lt;p&gt;这里也不仅仅是指弹性图片，其他的填充元素也可以。弹性表明内部的元素能够根据外部空间大小实现自适应，即动态调整自己的宽和高的大小以被包容。我们可以通过 &lt;code&gt;img{width: 100%; height: 100%;}&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;h2 id=&quot;meta-viewport-的用处&quot;&gt;&lt;a href=&quot;#meta-viewport-的用处&quot; class=&quot;headerlink&quot; title=&quot;meta viewport 的用处&quot;&gt;&lt;/a&gt;meta viewport 的用处&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width = device-width, initial-scale = 1&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;三种viewport&quot;&gt;&lt;a href=&quot;#三种viewport&quot; class=&quot;headerlink&quot; title=&quot;三种viewport&quot;&gt;&lt;/a&gt;三种viewport&lt;/h3&gt;&lt;p&gt;在苹果的规范中，meta viewport 有6个属性：width，initial-scale，minimum-scale，maximum-scale，height，user-scalable（no表示不允许用户进行缩放）。viewport 指浏览器中能用来显示网页的那部分，它的大小并不局限于浏览器可视区域。更多关于viewport的探讨可以参考&lt;a href=&quot;http://www.quirksmode.org/mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.quirksmode.org/mobile/&lt;/a&gt;中提到的三个viewport(layout viewport、visual viewport，ideal viewport)。其中 layout viewport 指浏览器中能够用来显示网页的部分（使用 document.documentElement.clientWidth 获得），visual viewport （使用 window.innerWidth 获得）指能够被用户看到的区域，ideal viewport 是用户无需放大、滚动条就能看到完整的网页的取值（不同的设备对这个值的规定不同）。&lt;/p&gt;
&lt;h3 id=&quot;实现ideal-viewport&quot;&gt;&lt;a href=&quot;#实现ideal-viewport&quot; class=&quot;headerlink&quot; title=&quot;实现ideal viewport&quot;&gt;&lt;/a&gt;实现ideal viewport&lt;/h3&gt;&lt;p&gt;我们有两种方法使 viewport 的取值达到理想状态。第一种就是 &lt;code&gt;width=device-width&lt;/code&gt;（这里的 width指的是 layout width ），让 viewport 的宽度等于设备的宽度，这就是我们想要的 ideal viewport。不过在 ipad 和 iphone 上使用这种方法时，无论横屏、竖屏，都只能得到竖屏时的ideal viewport。&lt;/p&gt;
&lt;p&gt;第二种方法是 &lt;code&gt;initial-scale=1&lt;/code&gt; 。这里的缩放值为1，它告诉设备，不要对当前页面进行缩放，页面便获得了 ideal viewport 。 viewport 的缩放是相对于 ideal viewport 来缩放的，缩放值越大，当前viewport的宽度就会越小。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当前缩放值 ＝ ideal viewport ／ visual viewport
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过在IE中使用这种方法时，无论横屏、竖屏，都只能得到竖屏时的 ideal viewport 。所以通常我们将这两种都写上，就考虑得比较周全。&lt;/p&gt;
&lt;p&gt;顺带一提，&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=400, initial-scale=1&amp;quot;&amp;gt;&lt;/code&gt; 这种情况下设备将比较 width 的值和 ideal viewport 的值，浏览器取更大的那个宽度。&lt;/p&gt;
&lt;h2 id=&quot;1px-CSS-amp-1px-设备&quot;&gt;&lt;a href=&quot;#1px-CSS-amp-1px-设备&quot; class=&quot;headerlink&quot; title=&quot;1px(CSS) &amp;amp; 1px(设备)&quot;&gt;&lt;/a&gt;1px(CSS) &amp;amp; 1px(设备)&lt;/h2&gt;&lt;p&gt;在桌面浏览器中的 CSS 的 1px 往往对应对应着设备屏幕的1个物理像素，但这两个像素并不是同一种含义。 CSS 中的 px 只是一抽象单位，这里设置的 1px 在不同的设备中所代表的物理像素都不同。对于桌面浏览器的网页，我们可以不用过多考虑这个，但在移动设备中，CSS 中的 1px 对应的设备像素大小就各不相同了。&lt;/p&gt;
&lt;p&gt;用户缩放也将改变 CSS 中像素与设备像素的对应。当用户把界面放大一倍， CSS 中的 1px 对应的物理像素也增加一倍。&lt;/p&gt;
&lt;h2 id=&quot;响应式布局代码示范&quot;&gt;&lt;a href=&quot;#响应式布局代码示范&quot; class=&quot;headerlink&quot; title=&quot;响应式布局代码示范&quot;&gt;&lt;/a&gt;响应式布局代码示范&lt;/h2&gt;&lt;p&gt;这里可以看看IFE任务中关于&lt;a href=&quot;http://7xrp04.com1.z0.glb.clouddn.com/task_1_8_1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;栅格结构的实现效果图&lt;/a&gt;。这里可以使用响应式网页设计来实现。&lt;a href=&quot;http://stacyyy.github.io/IFE/task1_8/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码看这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;实现自适应&quot;&gt;&lt;a href=&quot;#实现自适应&quot; class=&quot;headerlink&quot; title=&quot;实现自适应&quot;&gt;&lt;/a&gt;实现自适应&lt;/h3&gt;&lt;p&gt;看到设计要求的时候，可能会想到下面这种这种方法实现元素之间的间隔和宽度适应：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/index.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;@media (min-width: 768px){
  .col-md-4{
    float: left;
    width: 33.33%;
    margin: 10px;
    border: 1px solid #999;
    background-color: #eee;
  }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里使用媒体查询和 float 实现对网页对宽度变化的响应，但没有实现元素自适应，并且元素宽度用百分比度量，而 border 的值是用 px 度量。那么这个 border 的值究竟占当前视口多少百分比？我们需要通过计算才能保证所有宽度加起来不超过百分百。同时，各元素之间的间隔用 margin 值来设置，这个宽度所占百分比也需要我们计算。&lt;/p&gt;
&lt;p&gt;现在我们可以提供另一种解决方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/index.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;@media (min-width: 768px){
 .col-md-4{
  float: left;
  width: 33.33%;
  padding: 10px;
  box-sizing: border-box;
 }

 .inner{
  border: 1px solid #999;
  background-color: #eee;
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里用了两层块级元素嵌套，inner 框的宽度就实现了自适应。不用担心 border 的取值影响元素宽度占比，用 padding 代替使用 margin，不担心各栅格之间的空格实现。&lt;/p&gt;
&lt;p&gt;上文中的 &lt;code&gt;box-sizing: border-box;&lt;/code&gt; 保证了 padding 值不回被加入宽度导致容器被撑破。我们也可以用 calc( ) 来实现同样的效果。总宽度100%减去 border &lt;em&gt; 2,减去 padding ＊ 2，得到的就是盒子里元素所能使用的宽度。在这里：```width: calc(100% - (10px + 1px) &lt;/em&gt; 2);&lt;code&gt;。一般我们还会加上&lt;/code&gt;width: 90%;``` 提供给不支持 calc 的浏览器。&lt;/p&gt;
&lt;h3 id=&quot;用SCSS进行代码优化&quot;&gt;&lt;a href=&quot;#用SCSS进行代码优化&quot; class=&quot;headerlink&quot; title=&quot;用SCSS进行代码优化&quot;&gt;&lt;/a&gt;用SCSS进行代码优化&lt;/h3&gt;&lt;p&gt;示例中的代码里只有一组 class 值相同的元素，但如果有很多的框各有不同的宽度占比，我们通过计算直接写出宽度百分比显然不是个好方法。事实上我们可以通过SCSS写出根据属性值计算宽度占比的复用表达式（这里按分栏命名属性值标准化就显得很有好处了：col-md-*）。&lt;/p&gt;
&lt;p&gt;HTML 中的代码不变，我们使用 SCSS 可以更简洁地实现我们的目的。顺带一提，SCSS 中不直接使用属性具体值，而是声明变量后引用，这样在我们需要修改参数时很方便。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//caculate the width

@mixin generateGrid($scr_flag){

 @if $scr_flag{

    @for $i from 1 through 12{
        .col-md-#{$i}{
            width:(100% / 12 * $i);
        }
    }
 }
}

@media (min-width:769px){
@include generateGrid(true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他样式声明这里就不加了。在更多的时候我们还会发现 @media 和 @include 方便对代码复用提供的便捷。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;1、&lt;a href=&quot;http://www.cnblogs.com/2050/p/3877280.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/2050/p/3877280.html&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://www.quirksmode.org/mobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.quirksmode.org/mobile/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://github.com/liujianhuanzz/ife_2016_spring/tree/master/task_1_8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/liujianhuanzz/ife_2016_spring/tree/master/task_1_8&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;响应式布局&quot;&gt;&lt;a href=&quot;#响应式布局&quot; class=&quot;headerlink&quot; title=&quot;响应式布局&quot;&gt;&lt;/a&gt;响应式布局&lt;/h2&gt;&lt;p&gt;（写栅格式布局时接触到的一些关于响应式布局的知识，以及运用SCSS对代码进行优化。）&lt;/p&gt;
    
    </summary>
    
      <category term="CSS + HTML" scheme="http://yoursite.com/categories/CSS-HTML/"/>
    
    
      <category term="response_web_design viewport SCSS" scheme="http://yoursite.com/tags/response-web-design-viewport-SCSS/"/>
    
  </entry>
  
</feed>
